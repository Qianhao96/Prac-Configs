pipeline {
    environment {
        registry = "lqh19960723/prac_api"
        registryCredential = 'prac-api-dockerhub'
    }
    agent any
    stages {
        stage('Checkout API') {
            steps {
                script {
                    checkout scm
                }
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'main']], // master
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'prac-api']], 
                        extensions: [], 
                        submoduleCfg: [], 
                        userRemoteConfigs: [[credentialsId: 'Git-Personal-Access-Token', url: 'https://github.com/Qianhao96/Prac-API.git']]
                    ])
                }
            }
        }
        stage('Build Docker image') {
            steps {
                script {
                    pracApi = docker.build(registry, "--file deployment/Dockerfiles/Dockerfile.api .")
                }
            }
        }
        stage('Push image to Dockerhub lqh19960723/prac_api') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        pracApi.push("${env.BUILD_ID}")
                    }
                }
            }
        }
        stage ('BuildDocker API Image And Deploy To Remote server') {
            steps{
                
                script {
                    sshagent(credentials : ['SSH-DEPLOY-KEY']) {
                        sh 'ssh -o StrictHostKeyChecking=no lqh@192.168.20.153 uptime'
                        // Can not rm -r on empty directory, so alwayse create a dummy file first.
                        sh 'ssh lqh@192.168.20.153 "docker pull lqh19960723/prac_api:${env.BUILD_ID}"'
                    }
                }
            }
        }

        // script {
        //      cleanWs()
        // }
        // stage('Cleaning up') { 
        //     steps { 
        //         sh "docker rmi $registry:$env.BUILD_ID"
        //         sh "docker rmi $registry:latest" 
        //         cleanWs()
        //     }
        // } 
    }
}